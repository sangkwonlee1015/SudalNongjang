package com.a606.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class SudalFarm extends Contract {
    public static final String BINARY = "0x60806040523480156200001157600080fd5b506040518060400160405280600881526020017f537564616c4e46540000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f4e4654000000000000000000000000000000000000000000000000000000000081525081600090816200008f919062000412565b508060019081620000a1919062000412565b505050620000c4620000b8620000ca60201b60201c565b620000d260201b60201c565b620004f9565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200021a57607f821691505b60208210810362000230576200022f620001d2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200029a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200025b565b620002a686836200025b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620002f3620002ed620002e784620002be565b620002c8565b620002be565b9050919050565b6000819050919050565b6200030f83620002d2565b620003276200031e82620002fa565b84845462000268565b825550505050565b600090565b6200033e6200032f565b6200034b81848462000304565b505050565b5b8181101562000373576200036760008262000334565b60018101905062000351565b5050565b601f821115620003c2576200038c8162000236565b62000397846200024b565b81016020851015620003a7578190505b620003bf620003b6856200024b565b83018262000350565b50505b505050565b600082821c905092915050565b6000620003e760001984600802620003c7565b1980831691505092915050565b6000620004028383620003d4565b9150826002028217905092915050565b6200041d8262000198565b67ffffffffffffffff811115620004395762000438620001a3565b5b62000445825462000201565b6200045282828562000377565b600060209050601f8311600181146200048a576000841562000475578287015190505b620004818582620003f4565b865550620004f1565b601f1984166200049a8662000236565b60005b82811015620004c4578489015182556001820191506020850194506020810190506200049d565b86831015620004e45784890151620004e0601f891682620003d4565b8355505b6001600288020188555050505b505050505050565b61356c80620005096000396000f3fe60806040526004361061012a5760003560e01c806370a08231116100ab578063b88d4fde1161006f578063b88d4fde146103e4578063c87b56dd1461040d578063e985e9c51461044a578063ea0fbfde14610487578063f2fde38b146104c5578063f4e71c7c146104ee5761012a565b806370a0823114610311578063715018a61461034e5780638da5cb5b1461036557806395d89b4114610390578063a22cb465146103bb5761012a565b806323b872dd116100f257806323b872dd1461023b5780633ccfd60b1461026457806342842e0e1461026e57806360a0425d146102975780636352211e146102d45761012a565b806301ffc9a71461012f57806306fdde031461016c578063081812fc14610197578063095ea7b3146101d457806316c52e4e146101fd575b600080fd5b34801561013b57600080fd5b50610156600480360381019061015191906120bc565b61051a565b6040516101639190612104565b60405180910390f35b34801561017857600080fd5b506101816105fc565b60405161018e91906121af565b60405180910390f35b3480156101a357600080fd5b506101be60048036038101906101b99190612207565b61068e565b6040516101cb9190612275565b60405180910390f35b3480156101e057600080fd5b506101fb60048036038101906101f691906122bc565b6106d4565b005b34801561020957600080fd5b50610224600480360381019061021f91906122fc565b6107eb565b6040516102329291906123e7565b60405180910390f35b34801561024757600080fd5b50610262600480360381019061025d919061241e565b61099f565b005b61026c6109ff565b005b34801561027a57600080fd5b506102956004803603810190610290919061241e565b610a5d565b005b3480156102a357600080fd5b506102be60048036038101906102b991906125a6565b610a7d565b6040516102cb9190612624565b60405180910390f35b3480156102e057600080fd5b506102fb60048036038101906102f69190612207565b610b73565b6040516103089190612275565b60405180910390f35b34801561031d57600080fd5b50610338600480360381019061033391906122fc565b610c24565b6040516103459190612624565b60405180910390f35b34801561035a57600080fd5b50610363610cdb565b005b34801561037157600080fd5b5061037a610cef565b6040516103879190612275565b60405180910390f35b34801561039c57600080fd5b506103a5610d19565b6040516103b291906121af565b60405180910390f35b3480156103c757600080fd5b506103e260048036038101906103dd919061266b565b610dab565b005b3480156103f057600080fd5b5061040b6004803603810190610406919061274c565b610dc1565b005b34801561041957600080fd5b50610434600480360381019061042f9190612207565b610e23565b60405161044191906121af565b60405180910390f35b34801561045657600080fd5b50610471600480360381019061046c91906127cf565b610f35565b60405161047e9190612104565b60405180910390f35b34801561049357600080fd5b506104ae60048036038101906104a99190612207565b610fc9565b6040516104bc92919061280f565b60405180910390f35b3480156104d157600080fd5b506104ec60048036038101906104e791906122fc565b610ffd565b005b3480156104fa57600080fd5b50610503611080565b6040516105119291906123e7565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105e557507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105f557506105f4826111f1565b5b9050919050565b60606000805461060b90612867565b80601f016020809104026020016040519081016040528092919081815260200182805461063790612867565b80156106845780601f1061065957610100808354040283529160200191610684565b820191906000526020600020905b81548152906001019060200180831161066757829003601f168201915b5050505050905090565b60006106998261125b565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106df82610b73565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361074f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107469061290a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661076e6112a6565b73ffffffffffffffffffffffffffffffffffffffff16148061079d575061079c816107976112a6565b610f35565b5b6107dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d39061299c565b60405180910390fd5b6107e683836112ae565b505050565b60608060006107f984610c24565b67ffffffffffffffff8111156108125761081161247b565b5b6040519080825280602002602001820160405280156108405781602001602082028036833780820191505090505b509050600061084e85610c24565b67ffffffffffffffff8111156108675761086661247b565b5b6040519080825280602002602001820160405280156108955781602001602082028036833780820191505090505b5090506000805b600980549050811015610990578673ffffffffffffffffffffffffffffffffffffffff166108c982610b73565b73ffffffffffffffffffffffffffffffffffffffff160361097d57600981815481106108f8576108f76129bc565b5b90600052602060002090600202016000015484838151811061091d5761091c6129bc565b5b6020026020010181815250506009818154811061093d5761093c6129bc565b5b906000526020600020906002020160010154838381518110610962576109616129bc565b5b602002602001018181525050818061097990612a1a565b9250505b808061098890612a1a565b91505061089c565b50828294509450505050915091565b6109b06109aa6112a6565b82611367565b6109ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e690612ad4565b60405180910390fd5b6109fa8383836113fc565b505050565b610a07611662565b6000610a11610cef565b90508073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610a59573d6000803e3d6000fd5b5050565b610a7883838360405180602001604052806000815250610dc1565b505050565b6000610a87611662565b60006040518060400160405280610a9e60086116e0565b81526020018581525090506009819080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550506000610af760086116e0565b9050610b0386826116ee565b610b0d818561170c565b8573ffffffffffffffffffffffffffffffffffffffff167fb3c7a41c7278b90fcea1402ee2a4c68f519389c49eab530e66192691d6284d6e8287604051610b5592919061280f565b60405180910390a2610b676008611779565b80925050509392505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1290612b40565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8b90612bd2565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610ce3611662565b610ced600061178f565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610d2890612867565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5490612867565b8015610da15780601f10610d7657610100808354040283529160200191610da1565b820191906000526020600020905b815481529060010190602001808311610d8457829003601f168201915b5050505050905090565b610dbd610db66112a6565b8383611855565b5050565b610dd2610dcc6112a6565b83611367565b610e11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0890612ad4565b60405180910390fd5b610e1d848484846119c1565b50505050565b6060610e2e8261125b565b6000600660008481526020019081526020016000208054610e4e90612867565b80601f0160208091040260200160405190810160405280929190818152602001828054610e7a90612867565b8015610ec75780601f10610e9c57610100808354040283529160200191610ec7565b820191906000526020600020905b815481529060010190602001808311610eaa57829003601f168201915b505050505090506000610ed8611a1d565b90506000815103610eed578192505050610f30565b600082511115610f22578082604051602001610f0a929190612c2e565b60405160208183030381529060405292505050610f30565b610f2b84611a34565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60098181548110610fd957600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b611005611662565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611074576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106b90612cc4565b60405180910390fd5b61107d8161178f565b50565b606080600060098054905067ffffffffffffffff8111156110a4576110a361247b565b5b6040519080825280602002602001820160405280156110d25781602001602082028036833780820191505090505b509050600060098054905067ffffffffffffffff8111156110f6576110f561247b565b5b6040519080825280602002602001820160405280156111245781602001602082028036833780820191505090505b5090506000805b6009805490508110156111e3576009818154811061114c5761114b6129bc565b5b906000526020600020906002020160000154848381518110611171576111706129bc565b5b60200260200101818152505060098181548110611191576111906129bc565b5b9060005260206000209060020201600101548383815181106111b6576111b56129bc565b5b60200260200101818152505081806111cd90612a1a565b92505080806111db90612a1a565b91505061112b565b508282945094505050509091565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61126481611a9c565b6112a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129a90612b40565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661132183610b73565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061137383610b73565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806113b557506113b48185610f35565b5b806113f357508373ffffffffffffffffffffffffffffffffffffffff166113db8461068e565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661141c82610b73565b73ffffffffffffffffffffffffffffffffffffffff1614611472576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146990612d56565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d890612de8565b60405180910390fd5b6114ec838383611b08565b6114f76000826112ae565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115479190612e08565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461159e9190612e3c565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461165d838383611b0d565b505050565b61166a6112a6565b73ffffffffffffffffffffffffffffffffffffffff16611688610cef565b73ffffffffffffffffffffffffffffffffffffffff16146116de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d590612ebc565b60405180910390fd5b565b600081600001549050919050565b611708828260405180602001604052806000815250611b12565b5050565b61171582611a9c565b611754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174b90612f4e565b60405180910390fd5b80600660008481526020019081526020016000209081611774919061311a565b505050565b6001816000016000828254019250508190555050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036118c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ba90613238565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516119b49190612104565b60405180910390a3505050565b6119cc8484846113fc565b6119d884848484611b6d565b611a17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0e906132ca565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611a3f8261125b565b6000611a49611a1d565b90506000815111611a695760405180602001604052806000815250611a94565b80611a7384611cf4565b604051602001611a84929190612c2e565b6040516020818303038152906040525b915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b611b1c8383611e54565b611b296000848484611b6d565b611b68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5f906132ca565b60405180910390fd5b505050565b6000611b8e8473ffffffffffffffffffffffffffffffffffffffff1661202d565b15611ce7578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611bb76112a6565b8786866040518563ffffffff1660e01b8152600401611bd9949392919061333f565b6020604051808303816000875af1925050508015611c1557506040513d601f19601f82011682018060405250810190611c1291906133a0565b60015b611c97573d8060008114611c45576040519150601f19603f3d011682016040523d82523d6000602084013e611c4a565b606091505b506000815103611c8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c86906132ca565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611cec565b600190505b949350505050565b606060008203611d3b576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611e4f565b600082905060005b60008214611d6d578080611d5690612a1a565b915050600a82611d6691906133fc565b9150611d43565b60008167ffffffffffffffff811115611d8957611d8861247b565b5b6040519080825280601f01601f191660200182016040528015611dbb5781602001600182028036833780820191505090505b5090505b60008514611e4857600182611dd49190612e08565b9150600a85611de3919061342d565b6030611def9190612e3c565b60f81b818381518110611e0557611e046129bc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611e4191906133fc565b9450611dbf565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611ec3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eba906134aa565b60405180910390fd5b611ecc81611a9c565b15611f0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0390613516565b60405180910390fd5b611f1860008383611b08565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f689190612e3c565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461202960008383611b0d565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61209981612064565b81146120a457600080fd5b50565b6000813590506120b681612090565b92915050565b6000602082840312156120d2576120d161205a565b5b60006120e0848285016120a7565b91505092915050565b60008115159050919050565b6120fe816120e9565b82525050565b600060208201905061211960008301846120f5565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561215957808201518184015260208101905061213e565b60008484015250505050565b6000601f19601f8301169050919050565b60006121818261211f565b61218b818561212a565b935061219b81856020860161213b565b6121a481612165565b840191505092915050565b600060208201905081810360008301526121c98184612176565b905092915050565b6000819050919050565b6121e4816121d1565b81146121ef57600080fd5b50565b600081359050612201816121db565b92915050565b60006020828403121561221d5761221c61205a565b5b600061222b848285016121f2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061225f82612234565b9050919050565b61226f81612254565b82525050565b600060208201905061228a6000830184612266565b92915050565b61229981612254565b81146122a457600080fd5b50565b6000813590506122b681612290565b92915050565b600080604083850312156122d3576122d261205a565b5b60006122e1858286016122a7565b92505060206122f2858286016121f2565b9150509250929050565b6000602082840312156123125761231161205a565b5b6000612320848285016122a7565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61235e816121d1565b82525050565b60006123708383612355565b60208301905092915050565b6000602082019050919050565b600061239482612329565b61239e8185612334565b93506123a983612345565b8060005b838110156123da5781516123c18882612364565b97506123cc8361237c565b9250506001810190506123ad565b5085935050505092915050565b600060408201905081810360008301526124018185612389565b905081810360208301526124158184612389565b90509392505050565b6000806000606084860312156124375761243661205a565b5b6000612445868287016122a7565b9350506020612456868287016122a7565b9250506040612467868287016121f2565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6124b382612165565b810181811067ffffffffffffffff821117156124d2576124d161247b565b5b80604052505050565b60006124e5612050565b90506124f182826124aa565b919050565b600067ffffffffffffffff8211156125115761251061247b565b5b61251a82612165565b9050602081019050919050565b82818337600083830152505050565b6000612549612544846124f6565b6124db565b90508281526020810184848401111561256557612564612476565b5b612570848285612527565b509392505050565b600082601f83011261258d5761258c612471565b5b813561259d848260208601612536565b91505092915050565b6000806000606084860312156125bf576125be61205a565b5b60006125cd868287016122a7565b93505060206125de868287016121f2565b925050604084013567ffffffffffffffff8111156125ff576125fe61205f565b5b61260b86828701612578565b9150509250925092565b61261e816121d1565b82525050565b60006020820190506126396000830184612615565b92915050565b612648816120e9565b811461265357600080fd5b50565b6000813590506126658161263f565b92915050565b600080604083850312156126825761268161205a565b5b6000612690858286016122a7565b92505060206126a185828601612656565b9150509250929050565b600067ffffffffffffffff8211156126c6576126c561247b565b5b6126cf82612165565b9050602081019050919050565b60006126ef6126ea846126ab565b6124db565b90508281526020810184848401111561270b5761270a612476565b5b612716848285612527565b509392505050565b600082601f83011261273357612732612471565b5b81356127438482602086016126dc565b91505092915050565b600080600080608085870312156127665761276561205a565b5b6000612774878288016122a7565b9450506020612785878288016122a7565b9350506040612796878288016121f2565b925050606085013567ffffffffffffffff8111156127b7576127b661205f565b5b6127c38782880161271e565b91505092959194509250565b600080604083850312156127e6576127e561205a565b5b60006127f4858286016122a7565b9250506020612805858286016122a7565b9150509250929050565b60006040820190506128246000830185612615565b6128316020830184612615565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061287f57607f821691505b60208210810361289257612891612838565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006128f460218361212a565b91506128ff82612898565b604082019050919050565b60006020820190508181036000830152612923816128e7565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612986603e8361212a565b91506129918261292a565b604082019050919050565b600060208201905081810360008301526129b581612979565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a25826121d1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a5757612a566129eb565b5b600182019050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612abe602e8361212a565b9150612ac982612a62565b604082019050919050565b60006020820190508181036000830152612aed81612ab1565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612b2a60188361212a565b9150612b3582612af4565b602082019050919050565b60006020820190508181036000830152612b5981612b1d565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612bbc60298361212a565b9150612bc782612b60565b604082019050919050565b60006020820190508181036000830152612beb81612baf565b9050919050565b600081905092915050565b6000612c088261211f565b612c128185612bf2565b9350612c2281856020860161213b565b80840191505092915050565b6000612c3a8285612bfd565b9150612c468284612bfd565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612cae60268361212a565b9150612cb982612c52565b604082019050919050565b60006020820190508181036000830152612cdd81612ca1565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612d4060258361212a565b9150612d4b82612ce4565b604082019050919050565b60006020820190508181036000830152612d6f81612d33565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612dd260248361212a565b9150612ddd82612d76565b604082019050919050565b60006020820190508181036000830152612e0181612dc5565b9050919050565b6000612e13826121d1565b9150612e1e836121d1565b9250828203905081811115612e3657612e356129eb565b5b92915050565b6000612e47826121d1565b9150612e52836121d1565b9250828201905080821115612e6a57612e696129eb565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612ea660208361212a565b9150612eb182612e70565b602082019050919050565b60006020820190508181036000830152612ed581612e99565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000612f38602e8361212a565b9150612f4382612edc565b604082019050919050565b60006020820190508181036000830152612f6781612f2b565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612fd07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612f93565b612fda8683612f93565b95508019841693508086168417925050509392505050565b6000819050919050565b600061301761301261300d846121d1565b612ff2565b6121d1565b9050919050565b6000819050919050565b61303183612ffc565b61304561303d8261301e565b848454612fa0565b825550505050565b600090565b61305a61304d565b613065818484613028565b505050565b5b818110156130895761307e600082613052565b60018101905061306b565b5050565b601f8211156130ce5761309f81612f6e565b6130a884612f83565b810160208510156130b7578190505b6130cb6130c385612f83565b83018261306a565b50505b505050565b600082821c905092915050565b60006130f1600019846008026130d3565b1980831691505092915050565b600061310a83836130e0565b9150826002028217905092915050565b6131238261211f565b67ffffffffffffffff81111561313c5761313b61247b565b5b6131468254612867565b61315182828561308d565b600060209050601f8311600181146131845760008415613172578287015190505b61317c85826130fe565b8655506131e4565b601f19841661319286612f6e565b60005b828110156131ba57848901518255600182019150602085019450602081019050613195565b868310156131d757848901516131d3601f8916826130e0565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061322260198361212a565b915061322d826131ec565b602082019050919050565b6000602082019050818103600083015261325181613215565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006132b460328361212a565b91506132bf82613258565b604082019050919050565b600060208201905081810360008301526132e3816132a7565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000613311826132ea565b61331b81856132f5565b935061332b81856020860161213b565b61333481612165565b840191505092915050565b60006080820190506133546000830187612266565b6133616020830186612266565b61336e6040830185612615565b81810360608301526133808184613306565b905095945050505050565b60008151905061339a81612090565b92915050565b6000602082840312156133b6576133b561205a565b5b60006133c48482850161338b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613407826121d1565b9150613412836121d1565b925082613422576134216133cd565b5b828204905092915050565b6000613438826121d1565b9150613443836121d1565b925082613453576134526133cd565b5b828206905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061349460208361212a565b915061349f8261345e565b602082019050919050565b600060208201905081810360008301526134c381613487565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613500601c8361212a565b915061350b826134ca565b602082019050919050565b6000602082019050818103600083015261352f816134f3565b905091905056fea26469706673582212202ef7fc227a008fae41c66419d3aed06a276c1b31ffe913b140ea917af05edf0e64736f6c63430008100033";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUDALS = "sudals";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_CREATESUDAL = "createSudal";

    public static final String FUNC_GETSUDALS = "getSudals";

    public static final String FUNC_GETSUDALSBYOWNER = "getSudalsByOwner";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event NEWSUDAL_EVENT = new Event("NewSudal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("1337", "0x48A5280dA4F476c8F255a484857E8b885eA85040");
        _addresses.put("202112031219", "0x9739CC7f01F5eb1FA5f2B1D4045d2153e6b44066");
    }

    @Deprecated
    protected SudalFarm(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SudalFarm(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SudalFarm(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SudalFarm(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<NewSudalEventResponse> getNewSudalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWSUDAL_EVENT, transactionReceipt);
        ArrayList<NewSudalEventResponse> responses = new ArrayList<NewSudalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewSudalEventResponse typedResponse = new NewSudalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.dna = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewSudalEventResponse> newSudalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewSudalEventResponse>() {
            @Override
            public NewSudalEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NEWSUDAL_EVENT, log);
                NewSudalEventResponse typedResponse = new NewSudalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.dna = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewSudalEventResponse> newSudalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWSUDAL_EVENT));
        return newSudalEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new Address(owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new Address(owner),
                new Address(operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(tokenId),
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new Address(operator),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> sudals(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUDALS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw(BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> createSudal(String _to, BigInteger _dna, String _tokenURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATESUDAL, 
                Arrays.<Type>asList(new Address(_to),
                new Uint256(_dna),
                new Utf8String(_tokenURI)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<List<BigInteger>, List<BigInteger>>> getSudals() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSUDALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple2<List<BigInteger>, List<BigInteger>>>(function,
                new Callable<Tuple2<List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<List<BigInteger>, List<BigInteger>>> getSudalsByOwner(String _owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSUDALSBYOWNER, 
                Arrays.<Type>asList(new Address(_owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple2<List<BigInteger>, List<BigInteger>>>(function,
                new Callable<Tuple2<List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    @Deprecated
    public static SudalFarm load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SudalFarm(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SudalFarm load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SudalFarm(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SudalFarm load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SudalFarm(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SudalFarm load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SudalFarm(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SudalFarm> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SudalFarm.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<SudalFarm> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SudalFarm.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SudalFarm> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SudalFarm.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SudalFarm> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SudalFarm.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class NewSudalEventResponse extends BaseEventResponse {
        public String owner;

        public BigInteger id;

        public BigInteger dna;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
